Go training
Go development @ANZ - lectures and labs

Julia Ogris
Engineer, ANZ
Julia.Ogris@anz.com
https://github.com/anz-bank/go-training


* Introduction


* Agenda (11 - 15 February)

- Introduction to Go
- Go language fundamentals
- Go standard library
- Go tool chain
- Third party Go libraries used at ANZ
- Project work

Find Slides at [[https://gotraining.appspot.com]] ([[https://github.com/anz-bank/go-slides][source]] on GitHub)


* Day 1 - Schedule

*Morning:* Introduction to Go

- Overview and history
- Demo

*Afternoon:* Hello world and first PR

- Interlude: towards continuous deployment (CD)
- Go language fundamentals
- First lab


* History and Overview


* History of Go

.image img/xkcd_compiling.png
.caption [[https://xkcd.com/303/]]

2007: Robert Griesemer, Rob Pike, and Ken Thompson start working on Go at Google
2008: Russ Cox (go mod) and Ian Taylor (gcc frontend) join
2009: Go goes Open Source
2012: Go version 1.0


* What is Go?

- A simple language that is easy to learn and read
- Statically typed, but with a dynamic feel
- Compiled to native machine code, but has a fast development cycle
- Language-level concurrency features
- Comprehensive and clear standard library
- Great tools
- Open source

(Source: [[https://talks.golang.org/2012/zen.slide#2][Go and the Zen of Python]])


* What does Go look like?

Hello world in Go

	package main

	import (
		"fmt"
	)

	func main() {
		fmt.Println("Hello, ಬೆಂಗಳೂರು")
	}

Execute with

	go run hello.go


* What is Go NOT?
Go favours simplicity and directness resulting in some purposeful omissions:

- No type hierarchies or inheritance
- No exceptions
- No method overloading
- No generics
- No decorators
- No named or optional arguments
- No operator overloading
- No macros
- No arguments about code style :)


* Motivation and Demo


* Why Go at ANZ

- simple: easy to learn and read
- a single obvious right way to do most things
- tools - `gofmt`, `goimports`, `go` `mod`, `go` `test`, `golangci-lint`, coverage
- standard library
- productive and fun
- lightweight concurrency


* Demo

- 2 seconds latency Pingserver
- Java Spring Boot implementation
- Go implementation
- Benchmark


* Java Spring Boot Initializr

	── build.gradle
	├── gradle
	│   └── wrapper
	│       ├── gradle-wrapper.jar
	│       └── gradle-wrapper.properties
	├── gradlew
	├── gradlew.bat
	├── settings.gradle
	└── src
	    ├── main
	    │   ├── java
	    │   │   └── com
	    │   │       └── anz
	    │   │           └── demo
	    │   │               └── pingserver
	    │   │                   ├── PingserverApplication.java
	    │   │                   └── controller
	    │   │                       └── PingController.java        <--------- THAT'S THE ONE
	    │   └── resources
	    │       └── application.properties
	    └── test
	          .....
		                                └── PingserverApplicationTests.java


* PingController.java

Source on [[https://github.com/anz-bank/go-slides/tree/master/pingserver/java][GitHub]]

	package com.anz.dcx.serverdemo.controller;

	import org.springframework.http.MediaType;
	import org.springframework.web.bind.annotation.GetMapping;
	import org.springframework.web.bind.annotation.ResponseBody;
	import org.springframework.web.bind.annotation.RestController;

	@RestController
	public class PingController {

	    @GetMapping(path = "/ping", produces = MediaType.TEXT_PLAIN_VALUE)
	    @ResponseBody
	    String ping() throws Exception {
	        Thread.sleep(2000L);
	        return "pong";
	    }
	}

Execute with

	./gradlew clean bootRun


* Go Implementation
Source on [[https://github.com/anz-bank/go-slides/tree/master/pingserver/go][GitHub]]

	├── go.mod
	├── go.sum
	└── main.go

Execute with

	go run main.go


* Main.go

	package main

	import (
		"fmt"
		"log"
		"net/http"
		"time"
	)

	func main() {
		http.HandleFunc("/ping", func(w http.ResponseWriter, r *http.Request) {
			time.Sleep(2000 * time.Millisecond)
			fmt.Fprint(w, "pong")
		})
		addr := ":9090"
		fmt.Println("Starting webserver on port", addr)
		log.Fatal(http.ListenAndServe(addr, nil))
	}


* Benchmark

- 7,000 concurrent requests
- Apache's `ab` command on MacBook Pro

    ab -n 7000 -c 7000 -s 200 localhost:8080/ping  # Java
    ab -n 7000 -c 7000 -s 200 localhost:9090/ping  # go

- Results

	Java mean: 36.3 sec
	Go mean:    2.8 sec

- Further details on [[https://github.com/anz-bank/go-slides/tree/master/pingserver#benchmark][GitHub]]


* Interlude: Towards Continuous Deployment


* What is Continuous Deployment (CD)?

Continuous Deployment != Continuous Delivery

.image img/cd.jpg
.caption [[https://blog.crisp.se/2013/02/05/yassalsundman/continuous-delivery-vs-continuous-deployment][Yassal Sundman, Continuous Delivery vs Continuous Deployment]]


* Continuous Deployment Quotes

"Continuous Deployment is a strategy for software releases wherein any code commit that passes the automated testing phase is automatically released into the production environment."
[[https://searchitoperations.techtarget.com/definition/continuous-deployment][TechTarget definition]]


"Continuous deployment requires a highly developed culture of monitoring, being on call, and having the capacity to recover quickly."
[[https://semaphoreci.com/blog/2017/07/27/what-is-the-difference-between-continuous-integration-continuous-deployment-and-continuous-delivery.html][Marko Anastasov, Semaphore Engineering Blog]]


* Recommendations for CD @ANZ (1/3)

- Use *trunk* *based* *development* (not GitFlow)
- Create *small* *PRs* (Pull Requests) that can be Squash Merged
- ... which lead to revertible commits that have passed automated tests
- Protect `master` branch on GitHub


* Recommendations for CD @ANZ (2/3)

Quality leads to the confidence to automatically deploy, so we need
ways to increase and maintain quality.

- Write great commit messages
- Think about the reviewer and review your own PRs first
- *Lint* strictly `golangci-lint` `run`
- Ensure *100%* *coverage*


* Recommendations for CD @ANZ (3/2)

- Test (unit & system), lint & cover as part of *CI* (Continuous Integration)
- *Version* all deployments (use [[https://semver.org/][semver]]; tag source, images etc.)
- *Document* for newbies in the README.md (must!) and use godoc
- Enjoy your CD as last step after successful CI run on master


* Protect master branch on GitHub

	Settings -> Options:
	[ ] Allow merge commits
	[x] Allow squash merging
	[ ] Allow rebase merging

	Settings -> Branches -> [Add rule|Edit] `master`:
	[x] Require pull request reviews before merging
	[x] Dismiss stale pull request approvals when new commits are pushed
	[x] Require status checks to pass before merging
	[x] Require branches to be up to date before merging
	[x] Include administrators


* Commit messages

.image img/xkcd_git_commit.png
.caption [[https://xkcd.com/1296/]]


* Commit messages - spot the difference

[[https://chris.beams.io/posts/git-commit/]]

	$ git log --oneline -5 --author cbeams --before "Fri Mar 26 2009"

	e5f4b49 Re-adding ConfigurationPostProcessorTests after its brief removal in r814. @Ignore-ing the testCglibClassesAreLoadedJustInTimeForEnhancement() method as it turns out this was one of the culprits in the recent build breakage. The classloader hacking causes subtle downstream effects, breaking unrelated tests. The test method is still useful, but should only be run on a manual basis to ensure CGLIB is not prematurely classloaded, and should not be run as part of the automated build.
	2db0f12 fixed two build-breaking issues: + reverted ClassMetadataReadingVisitor to revision 794 + eliminated ConfigurationPostProcessorTests until further investigation determines why it causes downstream tests to fail (such as the seemingly unrelated ClassPathXmlApplicationContextTests)
	147709f Tweaks to package-info.java files
	22b25e0 Consolidated Util and MutableAnnotationUtils classes into existing AsmUtils
	7f96f57 polishing

versus

	$ git log --oneline -5 --author pwebb --before "Sat Aug 30 2014"

	5ba3db6 Fix failing CompositePropertySourceTests
	84564a0 Rework @PropertySource early parsing logic
	e142fd1 Add tests for ImportSelector meta-data
	887815f Update docbook dependency and generate epub
	ac8326d Polish mockito usage


* Recipe for great commit messages

[[https://chris.beams.io/posts/git-commit/]]

- Separate subject from body with a blank line
- Limit the subject line to 60 characters
- *Capitalize* the subject line
- Do not end the subject line with a period
- Use the *imperative* *mood* in the subject line
- Wrap the body at 80 characters
- Use the body to explain what and why vs. how


* Two git commands for precision work

- Use `git` `rebase` `-i` `COMMIT_HASH` to rework your commits if necessary
- Use `git` `add` `-p` for two separate concerns addressed in the one file

Don't be afraid!
Try it out on a new, throwaway branch.


* Pull Request (PR) recommendations (1/2)

- Choose a meaningful *PR* *title*, it will become your Squash Merge message
- Fill in *PR* *description* and reference an Issue for instance with #6
- Review the *Files* *changed* tab - many reviewers start here
- Review the *Commits* tab - some reviewers start here
- Review the *Checks* tab - all checks must pass


* Pull Request (PR) recommendations (2/2)

- "Think of the reviewer: your code needs to be reviewable and that should be a prime concern when writing your code, commits and PRs." (@camh-anz)
- Tag your PR Title with `[WIP]` if adjustments are needed
- Rework fixup commits with `git` `rebase` `-i`  `COMMIT_HASH` and force push
- Add reviewers and remove `[WIP]` tag when all of the above are met
- Delete branch once merged, especially when using a single remote (no forks)


* Go language fundamentals


* Tutorials, references and tools

- [[https://tour.golang.org/][Tour of Go]]
- [[https://gobyexample.com/][Go by example]]
- [[https://play.golang.org/][Go playground]]
- [[https://golangbot.com/learn-golang-series/][Golangbot]]
- [[https://stackoverflow.com/questions/tagged/go?sort=votes&pageSize=100][Stackoverflow]]
- [[https://golang.org/ref/spec][The Go Programming Language Specification]]


* Values and Control Flow

- Values
- Variables
- Constants
- For
- If/Else
- Switch


* Lab 1

TODO


* Iterable data types and Range

- Arrays
- Slices
- Maps
- Channels
- Range


* Lab 2

TODO


* Functions

- Functions
- Multiple Return Values
- Variadic Functions
- Closures


* Lab 3

TODO


* Data structures and interfaces

- Pointers
- Structs
- Methods
- Interfaces


* Lab 4

TODO


* Errors

- Errors
- Panic
- Recover
- Defer


* Lab 5

TODO


* Concurrency

- Goroutines
- Channels
- Select


* Lab 6

TODO


* Go standard library

[[https://golang.org/pkg/]]
- fmt
- strings
- time
- encoding/json
- net/http
- regexp
- sort
- database/sql
- os
- path
- bytes
- ...


* Go tool chain

	go help
	go version
	go build ./...
	go test ./...
	go install ./...
	go mod init
	go mod vendor
	go mod tidy
	go clean -modcache
	go test -coverprofile=coverage.out ./... && go tool cover -html=coverage.out

Lint with

	golangci-lint run

and configure the linter in `.golangci.yml`

Use `gofmt` or `goimport` as part of your editor/IDE

* 3rd party Go libs @ANZ

- testify
- chi
- kingpin.v2
- TODO


* Project work

- Sample-rest
- decimal
- slackbot for ghe
- JSON custom tags


* References

- [[https://golang.org/doc/faq]]
- [[https://en.wikipedia.org/wiki/Go_(programming_language)][Wikipedia]]
- [[https://talks.golang.org/2015/gophercon-goevolution.slide][The Evolution of Go]]
- [[https://talks.golang.org/2012/zen.slide]]
- [[https://www.youtube.com/watch?v=ytEkHepK08c][Talk: A Tour of Go]]
